// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DiscountRule is an object representing the database table.
type DiscountRule struct {
	ID           int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID       string `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	IsPercentage bool   `boil:"is_percentage" json:"is_percentage" toml:"is_percentage" yaml:"is_percentage"`
	IsClubLists  bool   `boil:"is_club_lists" json:"is_club_lists" toml:"is_club_lists" yaml:"is_club_lists"`

	R *discountRuleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L discountRuleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DiscountRuleColumns = struct {
	ID           string
	UserID       string
	IsPercentage string
	IsClubLists  string
}{
	ID:           "id",
	UserID:       "user_id",
	IsPercentage: "is_percentage",
	IsClubLists:  "is_club_lists",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var DiscountRuleWhere = struct {
	ID           whereHelperint
	UserID       whereHelperstring
	IsPercentage whereHelperbool
	IsClubLists  whereHelperbool
}{
	ID:           whereHelperint{field: "`discount_rule`.`id`"},
	UserID:       whereHelperstring{field: "`discount_rule`.`user_id`"},
	IsPercentage: whereHelperbool{field: "`discount_rule`.`is_percentage`"},
	IsClubLists:  whereHelperbool{field: "`discount_rule`.`is_club_lists`"},
}

// DiscountRuleRels is where relationship names are stored.
var DiscountRuleRels = struct {
	DiscountAttributes string
}{
	DiscountAttributes: "DiscountAttributes",
}

// discountRuleR is where relationships are stored.
type discountRuleR struct {
	DiscountAttributes DiscountAttributeSlice `boil:"DiscountAttributes" json:"DiscountAttributes" toml:"DiscountAttributes" yaml:"DiscountAttributes"`
}

// NewStruct creates a new relationship struct
func (*discountRuleR) NewStruct() *discountRuleR {
	return &discountRuleR{}
}

// discountRuleL is where Load methods for each relationship are stored.
type discountRuleL struct{}

var (
	discountRuleAllColumns            = []string{"id", "user_id", "is_percentage", "is_club_lists"}
	discountRuleColumnsWithoutDefault = []string{"user_id", "is_percentage", "is_club_lists"}
	discountRuleColumnsWithDefault    = []string{"id"}
	discountRulePrimaryKeyColumns     = []string{"id"}
)

type (
	// DiscountRuleSlice is an alias for a slice of pointers to DiscountRule.
	// This should generally be used opposed to []DiscountRule.
	DiscountRuleSlice []*DiscountRule
	// DiscountRuleHook is the signature for custom DiscountRule hook methods
	DiscountRuleHook func(context.Context, boil.ContextExecutor, *DiscountRule) error

	discountRuleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	discountRuleType                 = reflect.TypeOf(&DiscountRule{})
	discountRuleMapping              = queries.MakeStructMapping(discountRuleType)
	discountRulePrimaryKeyMapping, _ = queries.BindMapping(discountRuleType, discountRuleMapping, discountRulePrimaryKeyColumns)
	discountRuleInsertCacheMut       sync.RWMutex
	discountRuleInsertCache          = make(map[string]insertCache)
	discountRuleUpdateCacheMut       sync.RWMutex
	discountRuleUpdateCache          = make(map[string]updateCache)
	discountRuleUpsertCacheMut       sync.RWMutex
	discountRuleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var discountRuleBeforeInsertHooks []DiscountRuleHook
var discountRuleBeforeUpdateHooks []DiscountRuleHook
var discountRuleBeforeDeleteHooks []DiscountRuleHook
var discountRuleBeforeUpsertHooks []DiscountRuleHook

var discountRuleAfterInsertHooks []DiscountRuleHook
var discountRuleAfterSelectHooks []DiscountRuleHook
var discountRuleAfterUpdateHooks []DiscountRuleHook
var discountRuleAfterDeleteHooks []DiscountRuleHook
var discountRuleAfterUpsertHooks []DiscountRuleHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DiscountRule) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountRuleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DiscountRule) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountRuleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DiscountRule) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountRuleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DiscountRule) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountRuleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DiscountRule) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountRuleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DiscountRule) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountRuleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DiscountRule) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountRuleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DiscountRule) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountRuleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DiscountRule) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountRuleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDiscountRuleHook registers your hook function for all future operations.
func AddDiscountRuleHook(hookPoint boil.HookPoint, discountRuleHook DiscountRuleHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		discountRuleBeforeInsertHooks = append(discountRuleBeforeInsertHooks, discountRuleHook)
	case boil.BeforeUpdateHook:
		discountRuleBeforeUpdateHooks = append(discountRuleBeforeUpdateHooks, discountRuleHook)
	case boil.BeforeDeleteHook:
		discountRuleBeforeDeleteHooks = append(discountRuleBeforeDeleteHooks, discountRuleHook)
	case boil.BeforeUpsertHook:
		discountRuleBeforeUpsertHooks = append(discountRuleBeforeUpsertHooks, discountRuleHook)
	case boil.AfterInsertHook:
		discountRuleAfterInsertHooks = append(discountRuleAfterInsertHooks, discountRuleHook)
	case boil.AfterSelectHook:
		discountRuleAfterSelectHooks = append(discountRuleAfterSelectHooks, discountRuleHook)
	case boil.AfterUpdateHook:
		discountRuleAfterUpdateHooks = append(discountRuleAfterUpdateHooks, discountRuleHook)
	case boil.AfterDeleteHook:
		discountRuleAfterDeleteHooks = append(discountRuleAfterDeleteHooks, discountRuleHook)
	case boil.AfterUpsertHook:
		discountRuleAfterUpsertHooks = append(discountRuleAfterUpsertHooks, discountRuleHook)
	}
}

// One returns a single discountRule record from the query.
func (q discountRuleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DiscountRule, error) {
	o := &DiscountRule{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for discount_rule")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DiscountRule records from the query.
func (q discountRuleQuery) All(ctx context.Context, exec boil.ContextExecutor) (DiscountRuleSlice, error) {
	var o []*DiscountRule

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DiscountRule slice")
	}

	if len(discountRuleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DiscountRule records in the query.
func (q discountRuleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count discount_rule rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q discountRuleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if discount_rule exists")
	}

	return count > 0, nil
}

// DiscountAttributes retrieves all the discount_attribute's DiscountAttributes with an executor.
func (o *DiscountRule) DiscountAttributes(mods ...qm.QueryMod) discountAttributeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`discount_attributes`.`discount_rule_id`=?", o.ID),
	)

	query := DiscountAttributes(queryMods...)
	queries.SetFrom(query.Query, "`discount_attributes`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`discount_attributes`.*"})
	}

	return query
}

// LoadDiscountAttributes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (discountRuleL) LoadDiscountAttributes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDiscountRule interface{}, mods queries.Applicator) error {
	var slice []*DiscountRule
	var object *DiscountRule

	if singular {
		object = maybeDiscountRule.(*DiscountRule)
	} else {
		slice = *maybeDiscountRule.(*[]*DiscountRule)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &discountRuleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &discountRuleR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`discount_attributes`),
		qm.WhereIn(`discount_attributes.discount_rule_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load discount_attributes")
	}

	var resultSlice []*DiscountAttribute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice discount_attributes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on discount_attributes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for discount_attributes")
	}

	if len(discountAttributeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DiscountAttributes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &discountAttributeR{}
			}
			foreign.R.DiscountRule = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.DiscountRuleID) {
				local.R.DiscountAttributes = append(local.R.DiscountAttributes, foreign)
				if foreign.R == nil {
					foreign.R = &discountAttributeR{}
				}
				foreign.R.DiscountRule = local
				break
			}
		}
	}

	return nil
}

// AddDiscountAttributes adds the given related objects to the existing relationships
// of the discount_rule, optionally inserting them as new records.
// Appends related to o.R.DiscountAttributes.
// Sets related.R.DiscountRule appropriately.
func (o *DiscountRule) AddDiscountAttributes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DiscountAttribute) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DiscountRuleID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `discount_attributes` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"discount_rule_id"}),
				strmangle.WhereClause("`", "`", 0, discountAttributePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DiscountRuleID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &discountRuleR{
			DiscountAttributes: related,
		}
	} else {
		o.R.DiscountAttributes = append(o.R.DiscountAttributes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &discountAttributeR{
				DiscountRule: o,
			}
		} else {
			rel.R.DiscountRule = o
		}
	}
	return nil
}

// SetDiscountAttributes removes all previously related items of the
// discount_rule replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DiscountRule's DiscountAttributes accordingly.
// Replaces o.R.DiscountAttributes with related.
// Sets related.R.DiscountRule's DiscountAttributes accordingly.
func (o *DiscountRule) SetDiscountAttributes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DiscountAttribute) error {
	query := "update `discount_attributes` set `discount_rule_id` = null where `discount_rule_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.DiscountAttributes {
			queries.SetScanner(&rel.DiscountRuleID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.DiscountRule = nil
		}

		o.R.DiscountAttributes = nil
	}
	return o.AddDiscountAttributes(ctx, exec, insert, related...)
}

// RemoveDiscountAttributes relationships from objects passed in.
// Removes related items from R.DiscountAttributes (uses pointer comparison, removal does not keep order)
// Sets related.R.DiscountRule.
func (o *DiscountRule) RemoveDiscountAttributes(ctx context.Context, exec boil.ContextExecutor, related ...*DiscountAttribute) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DiscountRuleID, nil)
		if rel.R != nil {
			rel.R.DiscountRule = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("discount_rule_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DiscountAttributes {
			if rel != ri {
				continue
			}

			ln := len(o.R.DiscountAttributes)
			if ln > 1 && i < ln-1 {
				o.R.DiscountAttributes[i] = o.R.DiscountAttributes[ln-1]
			}
			o.R.DiscountAttributes = o.R.DiscountAttributes[:ln-1]
			break
		}
	}

	return nil
}

// DiscountRules retrieves all the records using an executor.
func DiscountRules(mods ...qm.QueryMod) discountRuleQuery {
	mods = append(mods, qm.From("`discount_rule`"))
	return discountRuleQuery{NewQuery(mods...)}
}

// FindDiscountRule retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDiscountRule(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DiscountRule, error) {
	discountRuleObj := &DiscountRule{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `discount_rule` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, discountRuleObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from discount_rule")
	}

	return discountRuleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DiscountRule) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no discount_rule provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(discountRuleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	discountRuleInsertCacheMut.RLock()
	cache, cached := discountRuleInsertCache[key]
	discountRuleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			discountRuleAllColumns,
			discountRuleColumnsWithDefault,
			discountRuleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(discountRuleType, discountRuleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(discountRuleType, discountRuleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `discount_rule` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `discount_rule` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `discount_rule` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, discountRulePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into discount_rule")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == discountRuleMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for discount_rule")
	}

CacheNoHooks:
	if !cached {
		discountRuleInsertCacheMut.Lock()
		discountRuleInsertCache[key] = cache
		discountRuleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DiscountRule.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DiscountRule) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	discountRuleUpdateCacheMut.RLock()
	cache, cached := discountRuleUpdateCache[key]
	discountRuleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			discountRuleAllColumns,
			discountRulePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update discount_rule, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `discount_rule` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, discountRulePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(discountRuleType, discountRuleMapping, append(wl, discountRulePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update discount_rule row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for discount_rule")
	}

	if !cached {
		discountRuleUpdateCacheMut.Lock()
		discountRuleUpdateCache[key] = cache
		discountRuleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q discountRuleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for discount_rule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for discount_rule")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DiscountRuleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), discountRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `discount_rule` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, discountRulePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in discountRule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all discountRule")
	}
	return rowsAff, nil
}

var mySQLDiscountRuleUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DiscountRule) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no discount_rule provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(discountRuleColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDiscountRuleUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	discountRuleUpsertCacheMut.RLock()
	cache, cached := discountRuleUpsertCache[key]
	discountRuleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			discountRuleAllColumns,
			discountRuleColumnsWithDefault,
			discountRuleColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			discountRuleAllColumns,
			discountRulePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert discount_rule, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`discount_rule`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `discount_rule` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(discountRuleType, discountRuleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(discountRuleType, discountRuleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for discount_rule")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == discountRuleMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(discountRuleType, discountRuleMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for discount_rule")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for discount_rule")
	}

CacheNoHooks:
	if !cached {
		discountRuleUpsertCacheMut.Lock()
		discountRuleUpsertCache[key] = cache
		discountRuleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DiscountRule record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DiscountRule) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DiscountRule provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), discountRulePrimaryKeyMapping)
	sql := "DELETE FROM `discount_rule` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from discount_rule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for discount_rule")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q discountRuleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no discountRuleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from discount_rule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for discount_rule")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DiscountRuleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(discountRuleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), discountRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `discount_rule` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, discountRulePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from discountRule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for discount_rule")
	}

	if len(discountRuleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DiscountRule) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDiscountRule(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DiscountRuleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DiscountRuleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), discountRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `discount_rule`.* FROM `discount_rule` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, discountRulePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DiscountRuleSlice")
	}

	*o = slice

	return nil
}

// DiscountRuleExists checks if the DiscountRule row exists.
func DiscountRuleExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `discount_rule` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if discount_rule exists")
	}

	return exists, nil
}
